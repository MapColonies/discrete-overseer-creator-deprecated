openapi: 3.0.1
info:
  title: discrete-overseer-creator
  description: service that responsible for validating and ingesting discrete layers
  version: 1.0.0
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
paths:
  /layers:
    post:
      operationId: createLayer
      tags:
        - layers
      summary: start a process of creating new layer from raw data
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: './Schema/discreteIngestion/ingestionParams.yaml#/components/schemas/IngestionParams'
                - $ref: '#/components/schemas/IngestionParams'
            example:
              metadata:
                type: "RECORD_RASTER"
                classification: "string"
                productId: "string"
                productName: "string"
                productVersion: "47"
                productType: "Orthophoto"
                productSubType: "string"
                description: "string"
                srsId: "string"
                srsName: "string"
                producerName: "string"
                creationDate: "2022-10-25T10:44:42.787Z"
                ingestionDate: "2022-10-25T10:44:42.787Z"
                sourceDateStart: "2022-10-25T10:44:42.787Z"
                sourceDateEnd: "2022-10-25T10:44:42.787Z"
                maxResolutionDeg: 0.072
                maxResolutionMeter: 8000
                minHorizontalAccuracyCE90: 4000
                sensors: ["string"]
                region: ["string"]
                rms: 0
                scale: 100000000
                footprint:
                  type: "Polygon"
                  coordinates: [[[-180, -90], [-180, 90], [180, 90], [180, -90], [-180, -90]]]
                productBoundingBox: -180,-90,180,90
              originDirectory: "string"
              fileNames: ["example.tif"]

      responses:
        200:
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: OK
        400:
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorMessage'
        409:
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorMessage'
        500:
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorMessage'
  /tasks/{jobId}/{taskId}/completed:
    post:
      operationId: completeTask
      tags:
        - tasks
      summary: update overseer on completion of tiling task
      parameters:
        - in: path
          name: jobId
          schema:
            type: string
            format: uuid
          required: true
          description: job id
        - in: path
          name: taskId
          schema:
            type: string
            format: uuid
          required: true
          description: task id
      responses:
        200:
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: OK
        400:
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorMessage'
        404:
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorMessage'
        500:
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorMessage'
  /toc:
    post:
      operationId: getToc
      tags:
        - toc
      summary: gets a toc file representing the given layer
      requestBody:
        description: A json object containing operation and toc source type
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: string
                productVersion:
                  type: string
                operation:
                  $ref: '#/components/schemas/operation'
                productType:
                  $ref: '#/components/schemas/productType'
              required:
                - productId
                - productVersion
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tocResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/tocResponse'
        400:
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorMessage'
        404:
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorMessage'
        500:
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorMessage'
components:
  schemas:
    errorMessage:
      type: object
      properties:
        message::
          type: string
        stacktrace:
          type: string
      required:
        - message
    IngestionParams:
      type: object
      properties:
        metadata:
          type: object
          properties:
            productType:
              $ref: '#/components/schemas/productType'
    tocResponse:
      type: object
      properties:
        operation:
          $ref: '#/components/schemas/operation'
        productType:
          $ref: '#/components/schemas/productType'
        metadata:
          oneOf:
            - $ref: './Schema/updateLayerMetadata.yaml#/components/schemas/updateLayerMetadata'
            - type: object
              properties:
                productId:
                  type: string
                productVersion:
                  type: string
    operation:
      type: string
      enum:
        - ADD
        - UPDATE
        - REMOVE
    productType:
      type: string
      enum:
        - Orthophoto
        - OrthophotoHistory
        - RasterMap
        - RasterAid
        - RasterVector
      description: valid product types for ingestion
